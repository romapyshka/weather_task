{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","city","setCity","weather","setWeather","location","setLocation","catchLocation","setCatchLocation","catchLocalWeather","setCatchLocalWeather","a","fetch","then","res","json","result","useEffect","method","getLocation","setTimeout","console","log","className","name","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAGMA,EACG,mCADHA,EAEI,2CAqEKC,MAlEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACJC,EADI,KACEC,EADF,OAEmBF,mBAAS,IAF5B,mBAEJG,EAFI,KAEKC,EAFL,OAGqBJ,mBAAS,IAH9B,mBAGJK,EAHI,KAGMC,EAHN,OAI+BN,oBAAS,GAJxC,mBAIJO,EAJI,KAIWC,EAJX,OAKuCR,oBAAS,GALhD,mBAKJS,EALI,KAKeC,EALf,iDAqBX,sBAAAC,EAAA,uDAC0B,IAAlBJ,IAAgD,IAAtBE,GAC1BG,MAAM,GAAD,OAAId,EAAJ,qBAAyBO,EAAzB,kBAA2CP,IAC3Ce,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACEZ,EAAWY,GACXN,GAAqB,MANzC,4CArBW,sBAiDX,OA1CAO,qBAAU,YASgB,IAAlBV,GARa,uCAAG,sBAAAI,EAAA,+EACTC,MAAM,yBAA0B,CAACM,OAAQ,QAC3CL,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFV,EAAYU,EAAOf,MACnBO,GAAiB,OALT,2CAAH,oDASbW,KAEL,IAcHC,YAjCW,4CAiCiB,GAC5BC,QAAQC,IAAIjB,GACZgB,QAAQC,IAAInB,GAeR,sBAAKoB,UAAU,MAAf,UACI,mCAAMpB,EAAQqB,QACd,qBAAKD,UAAU,SAAf,SACI,uBACIE,KAAK,OACLF,UAAU,eACVG,YAAY,SACZC,SAAU,SAAAC,GAAC,OAAI1B,EAAQ0B,EAAEC,OAAOC,QAChCA,MAAO7B,EACP8B,WAtBM,SAAAC,GACF,UAAZA,EAAIC,KACJrB,MAAM,GAAD,OAAId,EAAJ,qBAAyBG,EAAzB,kBAAuCH,IACvCe,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACEd,EAAQ,IACRE,EAAWY,eCvCpBkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d6e5e1eb.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nconst api = {\n    key: \"2d71286bb9d4a67971e9ff6e1c293ad3\",\n    base: \"https://api.openweathermap.org/data/2.5/\"\n};\n\nfunction App() {\n    const [city, setCity] = useState('');\n    const [weather, setWeather] = useState({});\n    const [location, setLocation] = useState('');\n    const [catchLocation, setCatchLocation] = useState(false);\n    const [catchLocalWeather, setCatchLocalWeather] = useState(false);\n\n    useEffect(() => {\n        const getLocation = async () => {\n            return fetch('https://ipapi.co/json/', {method: \"GET\"})\n                .then(res => res.json())\n                .then(result => {\n                    setLocation(result.city);\n                    setCatchLocation(true);\n                })\n        };\n        if (catchLocation === false) {\n            getLocation();\n        }\n    }, []);\n    \n    async function getLocalWeather() {\n        if (catchLocation === true && catchLocalWeather === false) {\n            fetch(`${api.base}weather?q=${location}&appid=${api.key}`)\n                .then(res => res.json())\n                .then(result => {\n                        setWeather(result);\n                        setCatchLocalWeather(true);\n                    }\n                );\n        }\n    }\n    \n    setTimeout(getLocalWeather, 1);\n    console.log(location);\n    console.log(weather);\n    \n    const searchWeather = evt => {\n        if (evt.key === \"Enter\") {\n            fetch(`${api.base}weather?q=${city}&appid=${api.key}`)\n                .then(res => res.json())\n                .then(result => {\n                        setCity('');\n                        setWeather(result);\n                    }\n                );\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h2> {weather.name}</h2>\n            <div className=\"search\">\n                <input\n                    type=\"text\"\n                    className=\"search_input\"\n                    placeholder=\"Search\"\n                    onChange={e => setCity(e.target.value)}\n                    value={city}\n                    onKeyPress={searchWeather}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n\n\n\n// useEffect(() => {\n//     async function getLocation() {\n//         return new Promise(() => {\n//             if (catchLocation === false) {\n//                 fetch('https://ipapi.co/json/')\n//                     .then(res => res.json())\n//                     .then(result => {\n//                             setLocation(result);\n//                             setCatchLocation(true);\n//                         }\n//                     );\n//             }\n//             if (catchLocalWeather === false) {\n//                 fetch(`${api.base}weather?q=${location.city}&appid=${api.key}`)\n//                     .then(res => res.json())\n//                     .then(result => {\n//                             setWeather(result);\n//                             setCatchLocalWeather(true);\n//                         }\n//                     );\n//             }\n//         });\n//     }\n//     getLocation();\n//\n// }, []);\n\n// useEffect(() => {\n//         const getLocation = () => {\n//             return fetch('https://ipapi.co/json/', {method: \"GET\"})\n//                 .then(res => res.json())\n//                 .then(result => {\n//                     setLocation(result);\n//                     setCatchLocation(true);\n//                 });\n//         };\n//     if (catchLocation === false) {\n//         getLocation().then(r => getLocalWeather());\n//     }\n//     }, []);\n\n// function getLocation() {\n//     if (catchLocation === false) {\n//         fetch('https://ipapi.co/json/')\n//             .then(res => res.json())\n//             .then(result => {\n//                     setLocation(result);\n//                     setCatchLocation(true);\n//                 }\n//             );\n//     }\n// }\n//\n// useEffect(() => {\n//     async function getLocation() {\n//         return () => {\n//             if (catchLocation === false) {\n//                 fetch('https://ipapi.co/json/')\n//                     .then(res => res.json())\n//                     .then(result => {\n//                             setLocation(result.city);\n//                             setCatchLocation(true);\n//                         }\n//                     );\n//             }\n//         };\n//     }\n//     getLocation().then(r => setTimeout(getLocalWeather, 100));\n//\n// }, []);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}