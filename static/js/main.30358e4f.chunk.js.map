{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","city","setCity","weather","setWeather","location","setLocation","catchLocation","setCatchLocation","catchLocalWeather","setCatchLocalWeather","a","fetch","then","res","json","result","useEffect","method","getLocation","setTimeout","className","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","main","name","sys","country","d","day","getDay","date","getDate","month","getMonth","dateBuilder","Date","Math","round","temp","description","wind","speed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAGMA,EACG,mCADHA,EAEc,2CAFdA,EAGe,yBAmHNC,MAhHf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACJC,EADI,KACEC,EADF,OAEmBF,mBAAS,IAF5B,mBAEJG,EAFI,KAEKC,EAFL,OAGqBJ,mBAAS,IAH9B,mBAGJK,EAHI,KAGMC,EAHN,OAI+BN,oBAAS,GAJxC,mBAIJO,EAJI,KAIWC,EAJX,OAKuCR,oBAAS,GALhD,mBAKJS,EALI,KAKeC,EALf,iDAqBX,sBAAAC,EAAA,uDAC0B,IAAlBJ,IAAgD,IAAtBE,GAC1BG,MAAM,GAAD,OAAId,EAAJ,qBAAmCO,EAAnC,+BAAkEP,IAClEe,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFZ,EAAWY,GACXN,GAAqB,MANrC,4CArBW,sBA0DX,OAnDAO,qBAAU,YASgB,IAAlBV,GARa,uCAAG,sBAAAI,EAAA,+EACTC,MAAMd,EAAqB,CAACoB,OAAQ,QACtCL,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFV,EAAYU,EAAOf,MACnBO,GAAiB,OALT,2CAAH,oDASbW,KAEL,IAcHC,YAjCW,4CAiCiB,GA0BxB,qBAAKC,UAAU,MAAf,SAEI,sBAAKA,UAAU,SAAf,UAEI,uBACIC,KAAK,OACLD,UAAU,eACVE,YAAY,SACZC,SAAU,SAAAC,GAAC,OAAIvB,EAAQuB,EAAEC,OAAOC,QAChCA,MAAO1B,EACP2B,WAvBM,SAAAC,GACF,UAAZA,EAAIC,KACJlB,MAAM,GAAD,OAAId,EAAJ,qBAAmCG,EAAnC,+BAA8DH,IAC9De,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACEd,EAAQ,IACRE,EAAWY,SAoBM,oBAAhBb,EAAQ4B,KACb,gCACI,sBAAKV,UAAU,uBAAf,UAEI,sBAAKA,UAAU,WAAf,UACKlB,EAAQ6B,KADb,IAEK7B,EAAQ8B,IAAIC,WAEjB,qBAAKb,UAAU,OAAf,SA7CJ,SAACc,GACjB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YAErB,MAAM,GAAN,OAAUL,EAAV,YAAiBE,EAAjB,YAAyBE,GAsCAE,CAAY,IAAIC,WAKzB,qBAAKtB,UAAU,sBAAf,SAEI,sBAAKA,UAAU,OAAf,UACKuB,KAAKC,MAAO1C,EAAQ4B,KAAKe,MAD9B,QAGI,qBAAKzB,UAAU,iBAAf,SACKlB,EAAQA,QAAQ,GAAG4B,OAExB,qBAAKV,UAAU,sBAAf,SACKlB,EAAQA,QAAQ,GAAG4C,cAExB,sBAAK1B,UAAU,OAAf,mBACWlB,EAAQ6C,KAAKC,MADxB,kBASX,SCvGNC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.30358e4f.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nconst api = {\n    key: \"45a882703e376c6d8873aa87229ebf48\",\n    baseForWeather: \"https://api.openweathermap.org/data/2.5/\",\n    baseForLocation: \"https://ipapi.co/json/\",\n};\n\nfunction App() {\n    const [city, setCity] = useState('');\n    const [weather, setWeather] = useState({});\n    const [location, setLocation] = useState('');\n    const [catchLocation, setCatchLocation] = useState(false);\n    const [catchLocalWeather, setCatchLocalWeather] = useState(false);\n\n    useEffect(() => {\n        const getLocation = async () => {\n            return fetch(api.baseForLocation, {method: \"GET\"})\n                .then(res => res.json())\n                .then(result => {\n                    setLocation(result.city);\n                    setCatchLocation(true);\n                })\n        };\n        if (catchLocation === false) {\n            getLocation();\n        }\n    }, []);\n\n    async function getLocalWeather() {\n        if (catchLocation === true && catchLocalWeather === false) {\n            fetch(`${api.baseForWeather}weather?q=${location}&units=metric&appid=${api.key}`)\n                .then(res => res.json())\n                .then(result => {\n                    setWeather(result);\n                    setCatchLocalWeather(true);\n                });\n        }\n\n    }\n\n    setTimeout(getLocalWeather, 1);\n\n    const dateBuilder = (d) => {\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n        let day = days[d.getDay()];\n        let date = d.getDate();\n        let month = months[d.getMonth()];\n\n        return `${day} ${date} ${month}`\n    };\n\n    const searchWeather = evt => {\n        if (evt.key === \"Enter\") {\n            fetch(`${api.baseForWeather}weather?q=${city}&units=metric&appid=${api.key}`)\n                .then(res => res.json())\n                .then(result => {\n                        setCity('');\n                        setWeather(result);\n                    }\n                );\n        }\n    };\n\n    return (\n        <div className=\"App\">\n\n            <div className=\"search\">\n\n                <input\n                    type=\"text\"\n                    className=\"search_input\"\n                    placeholder=\"Search\"\n                    onChange={e => setCity(e.target.value)}\n                    value={city}\n                    onKeyPress={searchWeather}\n                />\n\n                {(typeof weather.main != \"undefined\") ? (\n                    <div>\n                        <div className=\"location_information\">\n\n                            <div className=\"location\">\n                                {weather.name},\n                                {weather.sys.country}\n                            </div>\n                            <div className=\"data\">\n                                {dateBuilder(new Date())}\n                            </div>\n\n                        </div>\n\n                        <div className=\"weather_information\">\n\n                            <div className=\"temp\">\n                                {Math.round((weather.main.temp))}Â°c\n\n                                <div className=\"weather_status\">\n                                    {weather.weather[0].main}\n                                </div>\n                                <div className=\"weather_description\">\n                                    {weather.weather[0].description}\n                                </div>\n                                <div className=\"wind\">\n                                    Wind: {weather.wind.speed} m/s\n                                </div>\n\n                            </div>\n\n\n                        </div>\n                    </div>\n                ) : ('')}\n            </div>\n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}